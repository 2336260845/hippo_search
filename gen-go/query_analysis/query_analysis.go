// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package query_analysis

import (
  "bytes"
  "context"
  "fmt"
  "github.com/apache/thrift/lib/go/thrift"
  "reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Query
//  - Analysis
//  - Extra
type QueryParam struct {
  Query string `thrift:"query,1,required" db:"query" json:"query"`
  Analysis string `thrift:"analysis,2,required" db:"analysis" json:"analysis"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewQueryParam() *QueryParam {
  return &QueryParam{}
}


func (p *QueryParam) GetQuery() string {
  return p.Query
}

func (p *QueryParam) GetAnalysis() string {
  return p.Analysis
}

func (p *QueryParam) GetExtra() map[string]string {
  return p.Extra
}
func (p *QueryParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetQuery bool = false;
  var issetAnalysis bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetQuery = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetAnalysis = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetQuery{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Query is not set"));
  }
  if !issetAnalysis{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Analysis is not set"));
  }
  return nil
}

func (p *QueryParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *QueryParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Analysis = v
}
  return nil
}

func (p *QueryParam)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extra[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QueryParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *QueryParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("analysis", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:analysis: ", p), err) }
  if err := oprot.WriteString(string(p.Analysis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:analysis: ", p), err) }
  return err
}

func (p *QueryParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *QueryParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryParam(%+v)", *p)
}

type QueryAnalysisService interface {
  // Parameters:
  //  - Param
  QueryAnalysis(ctx context.Context, param *QueryParam) (r []string, err error)
}

type QueryAnalysisServiceClient struct {
  c thrift.TClient
}

func NewQueryAnalysisServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *QueryAnalysisServiceClient {
  return &QueryAnalysisServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewQueryAnalysisServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *QueryAnalysisServiceClient {
  return &QueryAnalysisServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewQueryAnalysisServiceClient(c thrift.TClient) *QueryAnalysisServiceClient {
  return &QueryAnalysisServiceClient{
    c: c,
  }
}

func (p *QueryAnalysisServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Param
func (p *QueryAnalysisServiceClient) QueryAnalysis(ctx context.Context, param *QueryParam) (r []string, err error) {
  var _args2 QueryAnalysisServiceQueryAnalysisArgs
  _args2.Param = param
  var _result3 QueryAnalysisServiceQueryAnalysisResult
  if err = p.Client_().Call(ctx, "queryAnalysis", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type QueryAnalysisServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler      QueryAnalysisService
}

func (p *QueryAnalysisServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *QueryAnalysisServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *QueryAnalysisServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewQueryAnalysisServiceProcessor(handler QueryAnalysisService) *QueryAnalysisServiceProcessor {

  self4 := &QueryAnalysisServiceProcessor{handler: handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["queryAnalysis"] = &queryAnalysisServiceProcessorQueryAnalysis{handler: handler}
return self4
}

func (p *QueryAnalysisServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type queryAnalysisServiceProcessorQueryAnalysis struct {
  handler QueryAnalysisService
}

func (p *queryAnalysisServiceProcessorQueryAnalysis) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := QueryAnalysisServiceQueryAnalysisArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryAnalysis", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := QueryAnalysisServiceQueryAnalysisResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.QueryAnalysis(ctx, args.Param); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryAnalysis: " + err2.Error())
    oprot.WriteMessageBegin("queryAnalysis", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryAnalysis", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type QueryAnalysisServiceQueryAnalysisArgs struct {
  Param *QueryParam `thrift:"param,1" db:"param" json:"param"`
}

func NewQueryAnalysisServiceQueryAnalysisArgs() *QueryAnalysisServiceQueryAnalysisArgs {
  return &QueryAnalysisServiceQueryAnalysisArgs{}
}

var QueryAnalysisServiceQueryAnalysisArgs_Param_DEFAULT *QueryParam
func (p *QueryAnalysisServiceQueryAnalysisArgs) GetParam() *QueryParam {
  if !p.IsSetParam() {
    return QueryAnalysisServiceQueryAnalysisArgs_Param_DEFAULT
  }
return p.Param
}
func (p *QueryAnalysisServiceQueryAnalysisArgs) IsSetParam() bool {
  return p.Param != nil
}

func (p *QueryAnalysisServiceQueryAnalysisArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Param = &QueryParam{}
  if err := p.Param.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
  }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryAnalysis_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err) }
  if err := p.Param.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err) }
  return err
}

func (p *QueryAnalysisServiceQueryAnalysisArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAnalysisServiceQueryAnalysisArgs(%+v)", *p)
}

// Attributes:
//  - Success
type QueryAnalysisServiceQueryAnalysisResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewQueryAnalysisServiceQueryAnalysisResult() *QueryAnalysisServiceQueryAnalysisResult {
  return &QueryAnalysisServiceQueryAnalysisResult{}
}

var QueryAnalysisServiceQueryAnalysisResult_Success_DEFAULT []string

func (p *QueryAnalysisServiceQueryAnalysisResult) GetSuccess() []string {
  return p.Success
}
func (p *QueryAnalysisServiceQueryAnalysisResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *QueryAnalysisServiceQueryAnalysisResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.Success = append(p.Success, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryAnalysis_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAnalysisServiceQueryAnalysisResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *QueryAnalysisServiceQueryAnalysisResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAnalysisServiceQueryAnalysisResult(%+v)", *p)
}


